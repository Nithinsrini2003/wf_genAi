from flask import Flask, request, jsonify
from flask_cors import CORS
from rag_utils import summarize_and_compare

app = Flask(__name__)
CORS(app)  # Allow Streamlit frontend to access this backend

@app.route('/api/analyze', methods=['POST'])
def analyze():
    data = request.get_json()
    old_spec = data.get('old_spec', '')
    new_spec = data.get('new_spec', '')
    cookies = data.get('cookies', {})

    try:
        result = summarize_and_compare(old_spec, new_spec, cookies)
        return jsonify(result)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(port=8000)

---------

import streamlit as st
import requests

st.title("API Spec Comparator")

# Upload files
old_file = st.file_uploader("Upload OLD API Spec", type=['txt', 'json', 'yaml'])
new_file = st.file_uploader("Upload NEW API Spec", type=['txt', 'json', 'yaml'])

higgs_session = st.text_input("Higgs Session Cookie")
tachyon_url = st.text_input("Tachyon URL")
model_id = st.text_input("Model ID")

if st.button("Analyze"):
    if old_file and new_file and higgs_session and tachyon_url and model_id:
        old_content = old_file.read().decode("utf-8")
        new_content = new_file.read().decode("utf-8")

        payload = {
            "old_spec": old_content,
            "new_spec": new_content,
            "cookies": {
                "higgs_session": higgs_session,
                "tachyon_url": tachyon_url,
                "model_id": model_id
            }
        }

        response = requests.post("http://localhost:8000/api/analyze", json=payload)

        if response.status_code == 200:
            data = response.json()
            col1, col2 = st.columns(2)

            with col1:
                st.subheader("Old Spec Summary")
                st.write(data["old_summary"])

            with col2:
                st.subheader("New Spec Summary")
                st.write(data["new_summary"])

            st.subheader("Comparison Analysis")
            st.table(data["diff_table"])

        else:
            st.error("Error: " + response.text)
    else:
        st.warning("Please upload both files and provide all credentials.")


------------------

from sentence_transformers import SentenceTransformer
import requests
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

model = SentenceTransformer("all-MiniLM-L6-v2")

def generate_summary(content, cookies, tag):
    """Use Tachyon to summarize a section"""
    prompt = f"Summarize the following {tag} API spec:\n\n{content}"
    response = requests.post(
        f"{cookies['tachyon_url']}/v1/completions",
        json={
            "model": cookies["model_id"],
            "prompt": prompt,
            "temperature": 0.3,
            "max_tokens": 512
        },
        cookies={"higgs_session": cookies["higgs_session"]}
    )
    return response.json().get("choices", [{}])[0].get("text", "").strip()

def compare_texts(text1, text2):
    """Compare embeddings and show top differences"""
    lines1 = text1.splitlines()
    lines2 = text2.splitlines()

    emb1 = model.encode(lines1)
    emb2 = model.encode(lines2)

    sim_matrix = cosine_similarity(emb1, emb2)
    diffs = []

    for i, row in enumerate(sim_matrix):
        max_sim = np.max(row)
        if max_sim < 0.7:
            diffs.append({
                "Old Line": lines1[i],
                "Similarity": round(float(max_sim), 2),
                "Comment": "Changed or Removed"
            })

    for j in range(len(lines2)):
        if np.max(sim_matrix[:, j]) < 0.7:
            diffs.append({
                "Old Line": "",
                "Similarity": round(float(np.max(sim_matrix[:, j])), 2),
                "Comment": f"New line: {lines2[j]}"
            })

    return diffs

def summarize_and_compare(old_spec, new_spec, cookies):
    old_summary = generate_summary(old_spec, cookies, "old")
    new_summary = generate_summary(new_spec, cookies, "new")
    diffs = compare_texts(old_summary, new_summary)

    return {
        "old_summary": old_summary,
        "new_summary": new_summary,
        "diff_table": diffs
    }

---------------------------------------

Flask
Flask-CORS
streamlit
sentence-transformers
requests
numpy
scikit-learn
